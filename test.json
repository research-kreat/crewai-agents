⚠️ No similar trends found in Neo4j keyword search
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 4, column: 49, offset: 117} for query: '\n                    MATCH (k:Knowledge)\n                    RETURN \n                        COALESCE(k.id, toString(id(k))) AS _id,\n                        "No summary available" AS summary_text,\n                        k.title AS title,\n                        0.5 AS similarity_score,\n                        k.domain AS domain,\n                        k.knowledge_type AS knowledge_type\n                    ORDER BY k.data_quality_score DESC\n                    LIMIT 5\n                    '
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 51, offset: 525} for query: '\n        // Start from the relevant Knowledge nodes\n        MATCH (k:Knowledge)\n        WHERE k.id IN $knowledge_ids OR toString(id(k)) IN $knowledge_ids\n        \n        // First chain: Find related entities directly connected to Knowledge\n        MATCH p1 = (k)-[r1]->(level1)\n        WHERE NOT id(level1) = id(k)  // Avoid self-loops\n        \n        // Second chain: Find entities connected to the first level entities\n        OPTIONAL MATCH p2 = (level1)-[r2]->(level2)\n        WHERE NOT id(level2) = id(level1) AND NOT id(level2) = id(k)  // Avoid loops\n        \n        // Third chain: Find entities connected to the second level entities\n        OPTIONAL MATCH p3 = (level2)-[r3]->(level3)\n        WHERE NOT id(level3) = id(level2) AND NOT id(level3) = id(level1) AND NOT id(level3) = id(k)  // Avoid loops\n        \n        // Return complete paths with their relationships\n        RETURN \n            COALESCE(k.id, toString(id(k))) AS source_id,\n            k.title AS source_title,\n            type(r1) AS relation1,\n            labels(level1) AS level1_labels,\n            COALESCE(level1.title, level1.name, "Unknown") AS level1_title,\n            COALESCE(level1.id, toString(id(level1))) AS level1_id,\n            type(r2) AS relation2,\n            labels(level2) AS level2_labels,\n            COALESCE(level2.title, level2.name, "Unknown") AS level2_title,\n            COALESCE(level2.id, toString(id(level2))) AS level2_id,\n            type(r3) AS relation3,\n            labels(level3) AS level3_labels,\n            COALESCE(level3.title, level3.name, "Unknown") AS level3_title,\n            COALESCE(level3.id, toString(id(level3))) AS level3_id,\n            // Include property details for all nodes\n            properties(k) AS source_properties,\n            properties(level1) AS level1_properties,\n            properties(level2) AS level2_properties,\n            properties(level3) AS level3_properties\n        LIMIT 10\n        '
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 25, column: 42, offset: 1190} for query: '\n        // Start from the relevant Knowledge nodes\n        MATCH (k:Knowledge)\n        WHERE k.id IN $knowledge_ids OR toString(id(k)) IN $knowledge_ids\n        \n        // First chain: Find related entities directly connected to Knowledge\n        MATCH p1 = (k)-[r1]->(level1)\n        WHERE NOT id(level1) = id(k)  // Avoid self-loops\n        \n        // Second chain: Find entities connected to the first level entities\n        OPTIONAL MATCH p2 = (level1)-[r2]->(level2)\n        WHERE NOT id(level2) = id(level1) AND NOT id(level2) = id(k)  // Avoid loops\n        \n        // Third chain: Find entities connected to the second level entities\n        OPTIONAL MATCH p3 = (level2)-[r3]->(level3)\n        WHERE NOT id(level3) = id(level2) AND NOT id(level3) = id(level1) AND NOT id(level3) = id(k)  // Avoid loops\n        \n        // Return complete paths with their relationships\n        RETURN \n            COALESCE(k.id, toString(id(k))) AS source_id,\n            k.title AS source_title,\n            type(r1) AS relation1,\n            labels(level1) AS level1_labels,\n            COALESCE(level1.title, level1.name, "Unknown") AS level1_title,\n            COALESCE(level1.id, toString(id(level1))) AS level1_id,\n            type(r2) AS relation2,\n            labels(level2) AS level2_labels,\n            COALESCE(level2.title, level2.name, "Unknown") AS level2_title,\n            COALESCE(level2.id, toString(id(level2))) AS level2_id,\n            type(r3) AS relation3,\n            labels(level3) AS level3_labels,\n            COALESCE(level3.title, level3.name, "Unknown") AS level3_title,\n            COALESCE(level3.id, toString(id(level3))) AS level3_id,\n            // Include property details for all nodes\n            properties(k) AS source_properties,\n            properties(level1) AS level1_properties,\n            properties(level2) AS level2_properties,\n            properties(level3) AS level3_properties\n        LIMIT 10\n        '
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 4, column: 50, offset: 129} for query: '\n        // Start from the relevant Knowledge nodes\n        MATCH (k:Knowledge)\n        WHERE k.id IN $knowledge_ids OR toString(id(k)) IN $knowledge_ids\n        \n        // First chain: Find related entities directly connected to Knowledge\n        MATCH p1 = (k)-[r1]->(level1)\n        WHERE NOT id(level1) = id(k)  // Avoid self-loops\n        \n        // Second chain: Find entities connected to the first level entities\n        OPTIONAL MATCH p2 = (level1)-[r2]->(level2)\n        WHERE NOT id(level2) = id(level1) AND NOT id(level2) = id(k)  // Avoid loops\n        \n        // Third chain: Find entities connected to the second level entities\n        OPTIONAL MATCH p3 = (level2)-[r3]->(level3)\n        WHERE NOT id(level3) = id(level2) AND NOT id(level3) = id(level1) AND NOT id(level3) = id(k)  // Avoid loops\n        \n        // Return complete paths with their relationships\n        RETURN \n            COALESCE(k.id, toString(id(k))) AS source_id,\n            k.title AS source_title,\n            type(r1) AS relation1,\n            labels(level1) AS level1_labels,\n            COALESCE(level1.title, level1.name, "Unknown") AS level1_title,\n            COALESCE(level1.id, toString(id(level1))) AS level1_id,\n            type(r2) AS relation2,\n            labels(level2) AS level2_labels,\n            COALESCE(level2.title, level2.name, "Unknown") AS level2_title,\n            COALESCE(level2.id, toString(id(level2))) AS level2_id,\n            type(r3) AS relation3,\n            labels(level3) AS level3_labels,\n            COALESCE(level3.title, level3.name, "Unknown") AS level3_title,\n            COALESCE(level3.id, toString(id(level3))) AS level3_id,\n            // Include property details for all nodes\n            properties(k) AS source_properties,\n            properties(level1) AS level1_properties,\n            properties(level2) AS level2_properties,\n            properties(level3) AS level3_properties\n        LIMIT 10\n        '
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 8, column: 32, offset: 310} for query: '\n        // Start from the relevant Knowledge nodes\n        MATCH (k:Knowledge)\n        WHERE k.id IN $knowledge_ids OR toString(id(k)) IN $knowledge_ids\n        \n        // First chain: Find related entities directly connected to Knowledge\n        MATCH p1 = (k)-[r1]->(level1)\n        WHERE NOT id(level1) = id(k)  // Avoid self-loops\n        \n        // Second chain: Find entities connected to the first level entities\n        OPTIONAL MATCH p2 = (level1)-[r2]->(level2)\n        WHERE NOT id(level2) = id(level1) AND NOT id(level2) = id(k)  // Avoid loops\n        \n        // Third chain: Find entities connected to the second level entities\n        OPTIONAL MATCH p3 = (level2)-[r3]->(level3)\n        WHERE NOT id(level3) = id(level2) AND NOT id(level3) = id(level1) AND NOT id(level3) = id(k)  // Avoid loops\n        \n        // Return complete paths with their relationships\n        RETURN \n            COALESCE(k.id, toString(id(k))) AS source_id,\n            k.title AS source_title,\n            type(r1) AS relation1,\n            labels(level1) AS level1_labels,\n            COALESCE(level1.title, level1.name, "Unknown") AS level1_title,\n            COALESCE(level1.id, toString(id(level1))) AS level1_id,\n            type(r2) AS relation2,\n            labels(level2) AS level2_labels,\n            COALESCE(level2.title, level2.name, "Unknown") AS level2_title,\n            COALESCE(level2.id, toString(id(level2))) AS level2_id,\n            type(r3) AS relation3,\n            labels(level3) AS level3_labels,\n            COALESCE(level3.title, level3.name, "Unknown") AS level3_title,\n            COALESCE(level3.id, toString(id(level3))) AS level3_id,\n            // Include property details for all nodes\n            properties(k) AS source_properties,\n            properties(level1) AS level1_properties,\n            properties(level2) AS level2_properties,\n            properties(level3) AS level3_properties\n        LIMIT 10\n        '
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 16, column: 19, offset: 716} for query: '\n        // Start from the relevant Knowledge nodes\n        MATCH (k:Knowledge)\n        WHERE k.id IN $knowledge_ids OR toString(id(k)) IN $knowledge_ids\n        \n        // First chain: Find related entities directly connected to Knowledge\n        MATCH p1 = (k)-[r1]->(level1)\n        WHERE NOT id(level1) = id(k)  // Avoid self-loops\n        \n        // Second chain: Find entities connected to the first level entities\n        OPTIONAL MATCH p2 = (level1)-[r2]->(level2)\n        WHERE NOT id(level2) = id(level1) AND NOT id(level2) = id(k)  // Avoid loops\n        \n        // Third chain: Find entities connected to the second level entities\n        OPTIONAL MATCH p3 = (level2)-[r3]->(level3)\n        WHERE NOT id(level3) = id(level2) AND NOT id(level3) = id(level1) AND NOT id(level3) = id(k)  // Avoid loops\n        \n        // Return complete paths with their relationships\n        RETURN \n            COALESCE(k.id, toString(id(k))) AS source_id,\n            k.title AS source_title,\n            type(r1) AS relation1,\n            labels(level1) AS level1_labels,\n            COALESCE(level1.title, level1.name, "Unknown") AS level1_title,\n            COALESCE(level1.id, toString(id(level1))) AS level1_id,\n            type(r2) AS relation2,\n            labels(level2) AS level2_labels,\n            COALESCE(level2.title, level2.name, "Unknown") AS level2_title,\n            COALESCE(level2.id, toString(id(level2))) AS level2_id,\n            type(r3) AS relation3,\n            labels(level3) AS level3_labels,\n            COALESCE(level3.title, level3.name, "Unknown") AS level3_title,\n            COALESCE(level3.id, toString(id(level3))) AS level3_id,\n            // Include property details for all nodes\n            properties(k) AS source_properties,\n            properties(level1) AS level1_properties,\n            properties(level2) AS level2_properties,\n            properties(level3) AS level3_properties\n        LIMIT 10\n        '
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 8, column: 19, offset: 297} for query: '\n        // Start from the relevant Knowledge nodes\n        MATCH (k:Knowledge)\n        WHERE k.id IN $knowledge_ids OR toString(id(k)) IN $knowledge_ids\n        \n        // First chain: Find related entities directly connected to Knowledge\n        MATCH p1 = (k)-[r1]->(level1)\n        WHERE NOT id(level1) = id(k)  // Avoid self-loops\n        \n        // Second chain: Find entities connected to the first level entities\n        OPTIONAL MATCH p2 = (level1)-[r2]->(level2)\n        WHERE NOT id(level2) = id(level1) AND NOT id(level2) = id(k)  // Avoid loops\n        \n        // Third chain: Find entities connected to the second level entities\n        OPTIONAL MATCH p3 = (level2)-[r3]->(level3)\n        WHERE NOT id(level3) = id(level2) AND NOT id(level3) = id(level1) AND NOT id(level3) = id(k)  // Avoid loops\n        \n        // Return complete paths with their relationships\n        RETURN \n            COALESCE(k.id, toString(id(k))) AS source_id,\n            k.title AS source_title,\n            type(r1) AS relation1,\n            labels(level1) AS level1_labels,\n            COALESCE(level1.title, level1.name, "Unknown") AS level1_title,\n            COALESCE(level1.id, toString(id(level1))) AS level1_id,\n            type(r2) AS relation2,\n            labels(level2) AS level2_labels,\n            COALESCE(level2.title, level2.name, "Unknown") AS level2_title,\n            COALESCE(level2.id, toString(id(level2))) AS level2_id,\n            type(r3) AS relation3,\n            labels(level3) AS level3_labels,\n            COALESCE(level3.title, level3.name, "Unknown") AS level3_title,\n            COALESCE(level3.id, toString(id(level3))) AS level3_id,\n            // Include property details for all nodes\n            properties(k) AS source_properties,\n            properties(level1) AS level1_properties,\n            properties(level2) AS level2_properties,\n            properties(level3) AS level3_properties\n        LIMIT 10\n        '
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 16, column: 96, offset: 793} for query: '\n        // Start from the relevant Knowledge nodes\n        MATCH (k:Knowledge)\n        WHERE k.id IN $knowledge_ids OR toString(id(k)) IN $knowledge_ids\n        \n        // First chain: Find related entities directly connected to Knowledge\n        MATCH p1 = (k)-[r1]->(level1)\n        WHERE NOT id(level1) = id(k)  // Avoid self-loops\n        \n        // Second chain: Find entities connected to the first level entities\n        OPTIONAL MATCH p2 = (level1)-[r2]->(level2)\n        WHERE NOT id(level2) = id(level1) AND NOT id(level2) = id(k)  // Avoid loops\n        \n        // Third chain: Find entities connected to the second level entities\n        OPTIONAL MATCH p3 = (level2)-[r3]->(level3)\n        WHERE NOT id(level3) = id(level2) AND NOT id(level3) = id(level1) AND NOT id(level3) = id(k)  // Avoid loops\n        \n        // Return complete paths with their relationships\n        RETURN \n            COALESCE(k.id, toString(id(k))) AS source_id,\n            k.title AS source_title,\n            type(r1) AS relation1,\n            labels(level1) AS level1_labels,\n            COALESCE(level1.title, level1.name, "Unknown") AS level1_title,\n            COALESCE(level1.id, toString(id(level1))) AS level1_id,\n            type(r2) AS relation2,\n            labels(level2) AS level2_labels,\n            COALESCE(level2.title, level2.name, "Unknown") AS level2_title,\n            COALESCE(level2.id, toString(id(level2))) AS level2_id,\n            type(r3) AS relation3,\n            labels(level3) AS level3_labels,\n            COALESCE(level3.title, level3.name, "Unknown") AS level3_title,\n            COALESCE(level3.id, toString(id(level3))) AS level3_id,\n            // Include property details for all nodes\n            properties(k) AS source_properties,\n            properties(level1) AS level1_properties,\n            properties(level2) AS level2_properties,\n            properties(level3) AS level3_properties\n        LIMIT 10\n        '
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 32, offset: 506} for query: '\n        // Start from the relevant Knowledge nodes\n        MATCH (k:Knowledge)\n        WHERE k.id IN $knowledge_ids OR toString(id(k)) IN $knowledge_ids\n        \n        // First chain: Find related entities directly connected to Knowledge\n        MATCH p1 = (k)-[r1]->(level1)\n        WHERE NOT id(level1) = id(k)  // Avoid self-loops\n        \n        // Second chain: Find entities connected to the first level entities\n        OPTIONAL MATCH p2 = (level1)-[r2]->(level2)\n        WHERE NOT id(level2) = id(level1) AND NOT id(level2) = id(k)  // Avoid loops\n        \n        // Third chain: Find entities connected to the second level entities\n        OPTIONAL MATCH p3 = (level2)-[r3]->(level3)\n        WHERE NOT id(level3) = id(level2) AND NOT id(level3) = id(level1) AND NOT id(level3) = id(k)  // Avoid loops\n        \n        // Return complete paths with their relationships\n        RETURN \n            COALESCE(k.id, toString(id(k))) AS source_id,\n            k.title AS source_title,\n            type(r1) AS relation1,\n            labels(level1) AS level1_labels,\n            COALESCE(level1.title, level1.name, "Unknown") AS level1_title,\n            COALESCE(level1.id, toString(id(level1))) AS level1_id,\n            type(r2) AS relation2,\n            labels(level2) AS level2_labels,\n            COALESCE(level2.title, level2.name, "Unknown") AS level2_title,\n            COALESCE(level2.id, toString(id(level2))) AS level2_id,\n            type(r3) AS relation3,\n            labels(level3) AS level3_labels,\n            COALESCE(level3.title, level3.name, "Unknown") AS level3_title,\n            COALESCE(level3.id, toString(id(level3))) AS level3_id,\n            // Include property details for all nodes\n            properties(k) AS source_properties,\n            properties(level1) AS level1_properties,\n            properties(level2) AS level2_properties,\n            properties(level3) AS level3_properties\n        LIMIT 10\n        '
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 33, column: 42, offset: 1638} for query: '\n        // Start from the relevant Knowledge nodes\n        MATCH (k:Knowledge)\n        WHERE k.id IN $knowledge_ids OR toString(id(k)) IN $knowledge_ids\n        \n        // First chain: Find related entities directly connected to Knowledge\n        MATCH p1 = (k)-[r1]->(level1)\n        WHERE NOT id(level1) = id(k)  // Avoid self-loops\n        \n        // Second chain: Find entities connected to the first level entities\n        OPTIONAL MATCH p2 = (level1)-[r2]->(level2)\n        WHERE NOT id(level2) = id(level1) AND NOT id(level2) = id(k)  // Avoid loops\n        \n        // Third chain: Find entities connected to the second level entities\n        OPTIONAL MATCH p3 = (level2)-[r3]->(level3)\n        WHERE NOT id(level3) = id(level2) AND NOT id(level3) = id(level1) AND NOT id(level3) = id(k)  // Avoid loops\n        \n        // Return complete paths with their relationships\n        RETURN \n            COALESCE(k.id, toString(id(k))) AS source_id,\n            k.title AS source_title,\n            type(r1) AS relation1,\n            labels(level1) AS level1_labels,\n            COALESCE(level1.title, level1.name, "Unknown") AS level1_title,\n            COALESCE(level1.id, toString(id(level1))) AS level1_id,\n            type(r2) AS relation2,\n            labels(level2) AS level2_labels,\n            COALESCE(level2.title, level2.name, "Unknown") AS level2_title,\n            COALESCE(level2.id, toString(id(level2))) AS level2_id,\n            type(r3) AS relation3,\n            labels(level3) AS level3_labels,\n            COALESCE(level3.title, level3.name, "Unknown") AS level3_title,\n            COALESCE(level3.id, toString(id(level3))) AS level3_id,\n            // Include property details for all nodes\n            properties(k) AS source_properties,\n            properties(level1) AS level1_properties,\n            properties(level2) AS level2_properties,\n            properties(level3) AS level3_properties\n        LIMIT 10\n        '
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 64, offset: 538} for query: '\n        // Start from the relevant Knowledge nodes\n        MATCH (k:Knowledge)\n        WHERE k.id IN $knowledge_ids OR toString(id(k)) IN $knowledge_ids\n        \n        // First chain: Find related entities directly connected to Knowledge\n        MATCH p1 = (k)-[r1]->(level1)\n        WHERE NOT id(level1) = id(k)  // Avoid self-loops\n        \n        // Second chain: Find entities connected to the first level entities\n        OPTIONAL MATCH p2 = (level1)-[r2]->(level2)\n        WHERE NOT id(level2) = id(level1) AND NOT id(level2) = id(k)  // Avoid loops\n        \n        // Third chain: Find entities connected to the second level entities\n        OPTIONAL MATCH p3 = (level2)-[r3]->(level3)\n        WHERE NOT id(level3) = id(level2) AND NOT id(level3) = id(level1) AND NOT id(level3) = id(k)  // Avoid loops\n        \n        // Return complete paths with their relationships\n        RETURN \n            COALESCE(k.id, toString(id(k))) AS source_id,\n            k.title AS source_title,\n            type(r1) AS relation1,\n            labels(level1) AS level1_labels,\n            COALESCE(level1.title, level1.name, "Unknown") AS level1_title,\n            COALESCE(level1.id, toString(id(level1))) AS level1_id,\n            type(r2) AS relation2,\n            labels(level2) AS level2_labels,\n            COALESCE(level2.title, level2.name, "Unknown") AS level2_title,\n            COALESCE(level2.id, toString(id(level2))) AS level2_id,\n            type(r3) AS relation3,\n            labels(level3) AS level3_labels,\n            COALESCE(level3.title, level3.name, "Unknown") AS level3_title,\n            COALESCE(level3.id, toString(id(level3))) AS level3_id,\n            // Include property details for all nodes\n            properties(k) AS source_properties,\n            properties(level1) AS level1_properties,\n            properties(level2) AS level2_properties,\n            properties(level3) AS level3_properties\n        LIMIT 10\n        '
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 16, column: 83, offset: 780} for query: '\n        // Start from the relevant Knowledge nodes\n        MATCH (k:Knowledge)\n        WHERE k.id IN $knowledge_ids OR toString(id(k)) IN $knowledge_ids\n        \n        // First chain: Find related entities directly connected to Knowledge\n        MATCH p1 = (k)-[r1]->(level1)\n        WHERE NOT id(level1) = id(k)  // Avoid self-loops\n        \n        // Second chain: Find entities connected to the first level entities\n        OPTIONAL MATCH p2 = (level1)-[r2]->(level2)\n        WHERE NOT id(level2) = id(level1) AND NOT id(level2) = id(k)  // Avoid loops\n        \n        // Third chain: Find entities connected to the second level entities\n        OPTIONAL MATCH p3 = (level2)-[r3]->(level3)\n        WHERE NOT id(level3) = id(level2) AND NOT id(level3) = id(level1) AND NOT id(level3) = id(k)  // Avoid loops\n        \n        // Return complete paths with their relationships\n        RETURN \n            COALESCE(k.id, toString(id(k))) AS source_id,\n            k.title AS source_title,\n            type(r1) AS relation1,\n            labels(level1) AS level1_labels,\n            COALESCE(level1.title, level1.name, "Unknown") AS level1_title,\n            COALESCE(level1.id, toString(id(level1))) AS level1_id,\n            type(r2) AS relation2,\n            labels(level2) AS level2_labels,\n            COALESCE(level2.title, level2.name, "Unknown") AS level2_title,\n            COALESCE(level2.id, toString(id(level2))) AS level2_id,\n            type(r3) AS relation3,\n            labels(level3) AS level3_labels,\n            COALESCE(level3.title, level3.name, "Unknown") AS level3_title,\n            COALESCE(level3.id, toString(id(level3))) AS level3_id,\n            // Include property details for all nodes\n            properties(k) AS source_properties,\n            properties(level1) AS level1_properties,\n            properties(level2) AS level2_properties,\n            properties(level3) AS level3_properties\n        LIMIT 10\n        '
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 16, column: 32, offset: 729} for query: '\n        // Start from the relevant Knowledge nodes\n        MATCH (k:Knowledge)\n        WHERE k.id IN $knowledge_ids OR toString(id(k)) IN $knowledge_ids\n        \n        // First chain: Find related entities directly connected to Knowledge\n        MATCH p1 = (k)-[r1]->(level1)\n        WHERE NOT id(level1) = id(k)  // Avoid self-loops\n        \n        // Second chain: Find entities connected to the first level entities\n        OPTIONAL MATCH p2 = (level1)-[r2]->(level2)\n        WHERE NOT id(level2) = id(level1) AND NOT id(level2) = id(k)  // Avoid loops\n        \n        // Third chain: Find entities connected to the second level entities\n        OPTIONAL MATCH p3 = (level2)-[r3]->(level3)\n        WHERE NOT id(level3) = id(level2) AND NOT id(level3) = id(level1) AND NOT id(level3) = id(k)  // Avoid loops\n        \n        // Return complete paths with their relationships\n        RETURN \n            COALESCE(k.id, toString(id(k))) AS source_id,\n            k.title AS source_title,\n            type(r1) AS relation1,\n            labels(level1) AS level1_labels,\n            COALESCE(level1.title, level1.name, "Unknown") AS level1_title,\n            COALESCE(level1.id, toString(id(level1))) AS level1_id,\n            type(r2) AS relation2,\n            labels(level2) AS level2_labels,\n            COALESCE(level2.title, level2.name, "Unknown") AS level2_title,\n            COALESCE(level2.id, toString(id(level2))) AS level2_id,\n            type(r3) AS relation3,\n            labels(level3) AS level3_labels,\n            COALESCE(level3.title, level3.name, "Unknown") AS level3_title,\n            COALESCE(level3.id, toString(id(level3))) AS level3_id,\n            // Include property details for all nodes\n            properties(k) AS source_properties,\n            properties(level1) AS level1_properties,\n            properties(level2) AS level2_properties,\n            properties(level3) AS level3_properties\n        LIMIT 10\n        '
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 12, column: 19, offset: 493} for query: '\n        // Start from the relevant Knowledge nodes\n        MATCH (k:Knowledge)\n        WHERE k.id IN $knowledge_ids OR toString(id(k)) IN $knowledge_ids\n        \n        // First chain: Find related entities directly connected to Knowledge\n        MATCH p1 = (k)-[r1]->(level1)\n        WHERE NOT id(level1) = id(k)  // Avoid self-loops\n        \n        // Second chain: Find entities connected to the first level entities\n        OPTIONAL MATCH p2 = (level1)-[r2]->(level2)\n        WHERE NOT id(level2) = id(level1) AND NOT id(level2) = id(k)  // Avoid loops\n        \n        // Third chain: Find entities connected to the second level entities\n        OPTIONAL MATCH p3 = (level2)-[r3]->(level3)\n        WHERE NOT id(level3) = id(level2) AND NOT id(level3) = id(level1) AND NOT id(level3) = id(k)  // Avoid loops\n        \n        // Return complete paths with their relationships\n        RETURN \n            COALESCE(k.id, toString(id(k))) AS source_id,\n            k.title AS source_title,\n            type(r1) AS relation1,\n            labels(level1) AS level1_labels,\n            COALESCE(level1.title, level1.name, "Unknown") AS level1_title,\n            COALESCE(level1.id, toString(id(level1))) AS level1_id,\n            type(r2) AS relation2,\n            labels(level2) AS level2_labels,\n            COALESCE(level2.title, level2.name, "Unknown") AS level2_title,\n            COALESCE(level2.id, toString(id(level2))) AS level2_id,\n            type(r3) AS relation3,\n            labels(level3) AS level3_labels,\n            COALESCE(level3.title, level3.name, "Unknown") AS level3_title,\n            COALESCE(level3.id, toString(id(level3))) AS level3_id,\n            // Include property details for all nodes\n            properties(k) AS source_properties,\n            properties(level1) AS level1_properties,\n            properties(level2) AS level2_properties,\n            properties(level3) AS level3_properties\n        LIMIT 10\n        '
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 16, column: 51, offset: 748} for query: '\n        // Start from the relevant Knowledge nodes\n        MATCH (k:Knowledge)\n        WHERE k.id IN $knowledge_ids OR toString(id(k)) IN $knowledge_ids\n        \n        // First chain: Find related entities directly connected to Knowledge\n        MATCH p1 = (k)-[r1]->(level1)\n        WHERE NOT id(level1) = id(k)  // Avoid self-loops\n        \n        // Second chain: Find entities connected to the first level entities\n        OPTIONAL MATCH p2 = (level1)-[r2]->(level2)\n        WHERE NOT id(level2) = id(level1) AND NOT id(level2) = id(k)  // Avoid loops\n        \n        // Third chain: Find entities connected to the second level entities\n        OPTIONAL MATCH p3 = (level2)-[r3]->(level3)\n        WHERE NOT id(level3) = id(level2) AND NOT id(level3) = id(level1) AND NOT id(level3) = id(k)  // Avoid loops\n        \n        // Return complete paths with their relationships\n        RETURN \n            COALESCE(k.id, toString(id(k))) AS source_id,\n            k.title AS source_title,\n            type(r1) AS relation1,\n            labels(level1) AS level1_labels,\n            COALESCE(level1.title, level1.name, "Unknown") AS level1_title,\n            COALESCE(level1.id, toString(id(level1))) AS level1_id,\n            type(r2) AS relation2,\n            labels(level2) AS level2_labels,\n            COALESCE(level2.title, level2.name, "Unknown") AS level2_title,\n            COALESCE(level2.id, toString(id(level2))) AS level2_id,\n            type(r3) AS relation3,\n            labels(level3) AS level3_labels,\n            COALESCE(level3.title, level3.name, "Unknown") AS level3_title,\n            COALESCE(level3.id, toString(id(level3))) AS level3_id,\n            // Include property details for all nodes\n            properties(k) AS source_properties,\n            properties(level1) AS level1_properties,\n            properties(level2) AS level2_properties,\n            properties(level3) AS level3_properties\n        LIMIT 10\n        '
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 16, column: 64, offset: 761} for query: '\n        // Start from the relevant Knowledge nodes\n        MATCH (k:Knowledge)\n        WHERE k.id IN $knowledge_ids OR toString(id(k)) IN $knowledge_ids\n        \n        // First chain: Find related entities directly connected to Knowledge\n        MATCH p1 = (k)-[r1]->(level1)\n        WHERE NOT id(level1) = id(k)  // Avoid self-loops\n        \n        // Second chain: Find entities connected to the first level entities\n        OPTIONAL MATCH p2 = (level1)-[r2]->(level2)\n        WHERE NOT id(level2) = id(level1) AND NOT id(level2) = id(k)  // Avoid loops\n        \n        // Third chain: Find entities connected to the second level entities\n        OPTIONAL MATCH p3 = (level2)-[r3]->(level3)\n        WHERE NOT id(level3) = id(level2) AND NOT id(level3) = id(level1) AND NOT id(level3) = id(k)  // Avoid loops\n        \n        // Return complete paths with their relationships\n        RETURN \n            COALESCE(k.id, toString(id(k))) AS source_id,\n            k.title AS source_title,\n            type(r1) AS relation1,\n            labels(level1) AS level1_labels,\n            COALESCE(level1.title, level1.name, "Unknown") AS level1_title,\n            COALESCE(level1.id, toString(id(level1))) AS level1_id,\n            type(r2) AS relation2,\n            labels(level2) AS level2_labels,\n            COALESCE(level2.title, level2.name, "Unknown") AS level2_title,\n            COALESCE(level2.id, toString(id(level2))) AS level2_id,\n            type(r3) AS relation3,\n            labels(level3) AS level3_labels,\n            COALESCE(level3.title, level3.name, "Unknown") AS level3_title,\n            COALESCE(level3.id, toString(id(level3))) AS level3_id,\n            // Include property details for all nodes\n            properties(k) AS source_properties,\n            properties(level1) AS level1_properties,\n            properties(level2) AS level2_properties,\n            properties(level3) AS level3_properties\n        LIMIT 10\n        '
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 29, column: 42, offset: 1414} for query: '\n        // Start from the relevant Knowledge nodes\n        MATCH (k:Knowledge)\n        WHERE k.id IN $knowledge_ids OR toString(id(k)) IN $knowledge_ids\n        \n        // First chain: Find related entities directly connected to Knowledge\n        MATCH p1 = (k)-[r1]->(level1)\n        WHERE NOT id(level1) = id(k)  // Avoid self-loops\n        \n        // Second chain: Find entities connected to the first level entities\n        OPTIONAL MATCH p2 = (level1)-[r2]->(level2)\n        WHERE NOT id(level2) = id(level1) AND NOT id(level2) = id(k)  // Avoid loops\n        \n        // Third chain: Find entities connected to the second level entities\n        OPTIONAL MATCH p3 = (level2)-[r3]->(level3)\n        WHERE NOT id(level3) = id(level2) AND NOT id(level3) = id(level1) AND NOT id(level3) = id(k)  // Avoid loops\n        \n        // Return complete paths with their relationships\n        RETURN \n            COALESCE(k.id, toString(id(k))) AS source_id,\n            k.title AS source_title,\n            type(r1) AS relation1,\n            labels(level1) AS level1_labels,\n            COALESCE(level1.title, level1.name, "Unknown") AS level1_title,\n            COALESCE(level1.id, toString(id(level1))) AS level1_id,\n            type(r2) AS relation2,\n            labels(level2) AS level2_labels,\n            COALESCE(level2.title, level2.name, "Unknown") AS level2_title,\n            COALESCE(level2.id, toString(id(level2))) AS level2_id,\n            type(r3) AS relation3,\n            labels(level3) AS level3_labels,\n            COALESCE(level3.title, level3.name, "Unknown") AS level3_title,\n            COALESCE(level3.id, toString(id(level3))) AS level3_id,\n            // Include property details for all nodes\n            properties(k) AS source_properties,\n            properties(level1) AS level1_properties,\n            properties(level2) AS level2_properties,\n            properties(level3) AS level3_properties\n        LIMIT 10\n        '
Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: The query used a deprecated function: `id`.} {position: line: 20, column: 37, offset: 934} for query: '\n        // Start from the relevant Knowledge nodes\n        MATCH (k:Knowledge)\n        WHERE k.id IN $knowledge_ids OR toString(id(k)) IN $knowledge_ids\n        \n        // First chain: Find related entities directly connected to Knowledge\n        MATCH p1 = (k)-[r1]->(level1)\n        WHERE NOT id(level1) = id(k)  // Avoid self-loops\n        \n        // Second chain: Find entities connected to the first level entities\n        OPTIONAL MATCH p2 = (level1)-[r2]->(level2)\n        WHERE NOT id(level2) = id(level1) AND NOT id(level2) = id(k)  // Avoid loops\n        \n        // Third chain: Find entities connected to the second level entities\n        OPTIONAL MATCH p3 = (level2)-[r3]->(level3)\n        WHERE NOT id(level3) = id(level2) AND NOT id(level3) = id(level1) AND NOT id(level3) = id(k)  // Avoid loops\n        \n        // Return complete paths with their relationships\n        RETURN \n            COALESCE(k.id, toString(id(k))) AS source_id,\n            k.title AS source_title,\n            type(r1) AS relation1,\n            labels(level1) AS level1_labels,\n            COALESCE(level1.title, level1.name, "Unknown") AS level1_title,\n            COALESCE(level1.id, toString(id(level1))) AS level1_id,\n            type(r2) AS relation2,\n            labels(level2) AS level2_labels,\n            COALESCE(level2.title, level2.name, "Unknown") AS level2_title,\n            COALESCE(level2.id, toString(id(level2))) AS level2_id,\n            type(r3) AS relation3,\n            labels(level3) AS level3_labels,\n            COALESCE(level3.title, level3.name, "Unknown") AS level3_title,\n            COALESCE(level3.id, toString(id(level3))) AS level3_id,\n            // Include property details for all nodes\n            properties(k) AS source_properties,\n            properties(level1) AS level1_properties,\n            properties(level2) AS level2_properties,\n            properties(level3) AS level3_properties\n        LIMIT 10\n     